// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  name String
  email String @unique
  password String
  role Role 
  mobileCode String
  mobileCountry String
  mobileNumber String 
  firstTimeLogin Boolean @default(true)
  registerVerificationStatus String @default("PARTIAL")
  verificationToken String?
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

   // Define the one-to-many relationship
  addresses                   UserAddress[] // A user can have multiple addresses

  savedAddresses              SavedAddress[]
  shipments                   Shipment[]

  agentShipmentId AgentShipment?

}

model Agent {
  id                        String     @id @default(cuid())
  name                      String
  email                     String     @unique
  password                  String
  role                      Role
  mobileCode                String
  mobileCountry             String
  mobileNumber              String
  firstTimeLogin            Boolean    @default(true)
  registerVerificationStatus String     @default("PARTIAL")
  appointmentDate           DateTime?
  verificationToken         String?

  updatedAt                 DateTime   @updatedAt
  createdAt                 DateTime   @default(now())

  // Define the many-to-many relationship via the junction table
  agentCountries            AgentCountry[]
  agentCategories           AccountCtegory[]
  listings                  Listing[]
  assignedShipments         AgentShipment[] @relation("shipmentAcceptedAgent")
  pickedShipments           AgentShipment[] @relation("ShipmentPickedAgent")
  deliveredShipments        AgentShipment[] @relation("ShipmentDeliverAgent")

}

model Country {
  id             Int    @id @default(autoincrement())
  name           String
  isoCode        String @unique
  iso3Code       String @unique
  callingCode    String
  region         String?
  subRegion      String?
  currencyCode   String
  currencyName   String
  currencySymbol String
  flag           String

  // Define the many-to-many relationship via the junction table
  agentCountries AgentCountry[]
  //Define the one-to-many relationship
  addresses      UserAddress[]
  savedAddresses SavedAddress[]
  shipments      Shipment[]

}

model UserAddress {
  id        String   @id @default(cuid()) // Primary key for the UserAddress table
  userId    String   // Foreign key to User
  countryId Int?     // Optional foreign key to Country

  addressOne String
  addressTwo String
  city      String
  state     String
  zipCode   String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to User
  country   Country? @relation(fields: [countryId], references: [id]) // Link to Country

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

}

model AgentCountry {
  id        String   @id @default(cuid())  // Primary key for this table
  agentId   String
  countryId Int

  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Add extra fields for the relationship
  assignedAt DateTime @default(now())      // Example: date when agent was assigned to country
  roleInCountry String?                    // Example: agent's role in the country

  @@unique([agentId, countryId])           // Ensures each agent-country pair is unique
}

model Category{
  id String @id @default(cuid())
  name String
  categoryImgUrl String
  description String
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())  

  // Define the one-to-many relationship via the junction table
   listings      Listing[]       
  // Define the many-to-many relationship via the junction table
  agentCategories AccountCtegory[]
}
model Listing {
  id            String           @id @default(cuid())
  title         String
  description   String
  price         Float
  categoryId    String
  agentId       String
  condition     Condition       @default(NEW)
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())

  // Define the relationship with Category
  category      Category         @relation(fields: [categoryId], references: [id])
  agent         Agent            @relation(fields: [agentId], references: [id],onDelete: Cascade)
}

model AccountCtegory{
  id String @id @default(cuid())
  agentId   String
  categoryId String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Add extra fields for the relationship
  assignedAt DateTime @default(now())      // Example: date when agent was assigned to country
  @@unique([agentId, categoryId]) 
  }

model SavedAddress{
  id String @id @default(cuid())
  userId String
  name String
  companyName String?
  addressOne String
  addressTwo String
  city String
  state String
  email String
  mobileNumber String
  countryId Int
  residentAddress Boolean
  saveAddress Boolean
  countryCode String
  zipCode String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id])
  user    User  @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model Shipment {
  id String @id @default(cuid())
  userId String
  shipmentId String?

  senderName String
  senderAddressOne String
  senderAddressTwo String
  senderCity String
  senderState String
  senderEmail String
  senderMobileNumber String

  shipmentDate DateTime
  deliveryDate DateTime

  receiverName String
  receiverAddressOne String
  receiverAddressTwo String
  receiverCity String
  receiverState String
  receiverEmail String
  receiverMobileNumber String
  receiverCountryId Int
  receiverCountryCode String
  receiverResidentAddress Boolean
  receiverZipCode String

  packageLength String
  packageWidth  String
  packageHeight String
  packageWeight String
  packagePieces String

  verbalNotificationService Boolean
  adultSignatureService Boolean
  directSignatureService Boolean
  pickupTimeFrom String
  pickupTimeTo String
  pickupInstructions String
  pickupSpecialInstructions String

  packageDescription String

  paymentSuccess Boolean @default(false)
  paymentAmount Float @default(0)
  customerId String?
  recieptUrl String?
  stripeId String?
  paymentCurrency String?
  shipmentStatus ShipmentStatus @default(PAYMENT_PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiverCountry Country @relation(fields: [receiverCountryId], references: [id])

  agentShipment AgentShipment?
}

model AgentShipment {
  id String @id @default(cuid())
  shipmentId String @unique
  userId String @unique
  shipmentAcceptedAssignedAgentId String?
  shipmentPickedAgentId String?
  shipmentDeliveryAgentId String?

  
  agent Agent? @relation("shipmentAcceptedAgent", fields: [shipmentAcceptedAssignedAgentId], references: [id], onDelete: Cascade)

  shipmentPickedAgent Agent? @relation("ShipmentPickedAgent", fields: [shipmentPickedAgentId], references: [id], onDelete: Cascade)
  
  shipmentDeliverAgent Agent? @relation("ShipmentDeliverAgent", fields: [shipmentDeliveryAgentId], references: [id], onDelete: Cascade)

  // Owns the relation
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


  

enum Role {
  AGENT
  USER
  SUPERADMIN
}
enum Condition {
  NEW
  USED
}

enum ShipmentStatus {
  PAYMENT_PENDING
  ORDER_PLACED
  ORDER_CONFIRMED
  SHIPMENT_PICKED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  }
