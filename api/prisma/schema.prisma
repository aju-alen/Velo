// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  name String
  email String @unique
  password String
  role Role 
  mobileCode String
  mobileCountry String
  mobileNumber String 
  firstTimeLogin Boolean @default(true)
  registerVerificationStatus String @default("PARTIAL")
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

   // Define the one-to-many relationship
  addresses                   UserAddress[] // A user can have multiple addresses
}

model Agent {
  id                        String     @id @default(cuid())
  name                      String
  email                     String     @unique
  password                  String
  role                      Role
  mobileCode                String
  mobileCountry             String
  mobileNumber              String
  firstTimeLogin            Boolean    @default(true)
  registerVerificationStatus String     @default("PARTIAL")
  appointmentDate           DateTime?

  updatedAt                 DateTime   @updatedAt
  createdAt                 DateTime   @default(now())

  // Define the many-to-many relationship via the junction table
  agentCountries            AgentCountry[]
}

model Country {
  id             Int    @id @default(autoincrement())
  name           String
  isoCode        String @unique
  iso3Code       String @unique
  callingCode    String
  region         String?
  subRegion      String?
  currencyCode   String
  currencyName   String
  currencySymbol String
  flag           String

  // Define the many-to-many relationship via the junction table
  agentCountries AgentCountry[]
  //Define the one-to-many relationship
  addresses      UserAddress[] // A country can have multiple addresses

}

model UserAddress {
  id        String   @id @default(cuid()) // Primary key for the UserAddress table
  userId    String   // Foreign key to User
  countryId Int?     // Optional foreign key to Country

  addressOne String
  addressTwo String
  city      String
  state     String
  zipCode   String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to User
  country   Country? @relation(fields: [countryId], references: [id]) // Link to Country

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

}

model AgentCountry {
  id        String   @id @default(cuid())  // Primary key for this table
  agentId   String
  countryId Int

  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Add extra fields for the relationship
  assignedAt DateTime @default(now())      // Example: date when agent was assigned to country
  roleInCountry String?                    // Example: agent's role in the country

  @@unique([agentId, countryId])           // Ensures each agent-country pair is unique
}

enum Role{
  AGENT
  USER
  SUPERADMIN
}

